# 用于展示给用户的标题
title: Django - SQL injection
# 漏洞编号（CVE/CAN/BUGTRAQ/CNCVE/CNVD/CNNVD...）
number: CVE-2022-28347
# 漏洞类型：从以下类型中选取
# 资源开发：Resource Development
# 初始访问：Initial Access
# 执行：Execution
# 持久控制：Persistence
# 提权：Privilege Escalation
# 绕过防御：Defense Evasion
# 凭证访问：Credential Access
# 发现：Discovery
# 横向渗透：Lateral Movement
# 信息收集：Collection
# 命令控制：Command and Control
# 信息盗取：Exfiltration
# 造成的影响：Impact
type: Execution
# 漏洞评分
score: 9.0
# 目标类型
target: 
  # 目标可在此操作系统运行
  os: 
    Windows: true
    AIX: false
    Linux: true
    Solaris: true
    BSD: true
    UNIX: true
    VxWorks: false
  # 目标所属应用程序类别
  app:
    web: true
    E-mail: false
    FTP: false
    database: false
    middleware: false
    other: ~
  # 目标是否可存在于硬件防火墙、入侵检测系统、路由器和交换机
  hardware:
    Firewall: true
    IDS: true
    router: true
    switch: true
  # 目标如果属于数据库，对应数据库产品
  Oracle: false
  MySQL: false
  SQL Server: false
  DM7: false
  DM8: false
  DB2: false
  Informix: false
  Gbase: false
  PostgreSQL: false
  SQLlite: false
  MariaDB: false
  MS-SQL: false

# 对漏洞的描述
vul_description: Django框架存在SQL注入漏洞，攻击者使用精心编制的字典，作为 **options 参数，可导致 QuerySet.explain () 方法在选项名称中受到 SQL 注入攻击。
# 对漏洞利用效果的描述
exp_effect: 执行未经授权的操作或者获取敏感数据
# 漏洞影响的版本范围（格式要求：软件名 版本号）
affect_version: Python:Django:2.2-2.2.28/3.2-3.2.13/4.0-4.0.4
# 脚本来源
source: https://www.djangoproject.com/weblog/2022/apr/11/security-releases/
# 来源认定漏洞危险等级
level: HIGH
# 脚本语言
language: 
  Ruby: false
  Perl: false
  Python: true
  PHP: false
  Java: false
  JavaScript: false
  other: ~
# 环境依赖
dependence: python3
# 脚本存储路径(相对路径)
path: poc/poc.py
# 备注（运行方式或任何提示）
help: |-  #给出运行示例命令行(Example)+具体的帮助信息(Usage)
  Example: python poc/poc.py -u http://127.0.0.1/vul/?id=1 -p id
  Usage: 
    python poc/poc.py -u <url> -p <parameter>
    